# ===================================================================
# Nginx Configuration for FinTech Server (Simplified & Corrected)
# ===================================================================

events {
    worker_connections 1024;
}

http {
    # CORS Origin 매핑 설정 (http 블록 최상단)
    map $http_origin $cors_origin {
        default "";
        "~^https?://(.*\.)?finview\.kr$" $http_origin;
        "~^https://finsight-c-7rus\.vercel\.app$" $http_origin;
        "~^https://finsight-c-tctt\.vercel\.app$" $http_origin;
    }
    
    # 기본 설정
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 로그 설정
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # 성능 최적화 설정
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # 업스트림 서버 정의 (Java Spring Boot 애플리케이션)
    upstream fintech_backend {
        server app:8080;
    }

    # 1. HTTP 요청을 HTTPS로 리디렉션하는 서버
    server {
        listen 80;
        server_name finsight.o-r.kr;
        return 301 https://$server_name$request_uri;
    }
    
    # 2. 내부 헬스체크를 위한 localhost 서버
    server {
        listen 80;
        server_name localhost;

        location /api/ {
            proxy_pass http://fintech_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
    
    # 3. 메인 HTTPS 서버
    server {
        listen 443 ssl http2;
        server_name finsight.o-r.kr;
        
        # SSL 인증서 경로
        ssl_certificate /etc/letsencrypt/live/finsight.o-r.kr/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/finsight.o-r.kr/privkey.pem;
        
        # SSL 보안 설정
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers off;
        
        # 보안 헤더 (Spring Boot에서 처리하므로 제거)
        # add_header X-Frame-Options "SAMEORIGIN" always;
        # add_header X-Content-Type-Options "nosniff" always;
        # add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # CORS 설정 (map으로 간소화)
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # 모든 요청을 백엔드로 프록시
        location / {
            # CORS Preflight 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $cors_origin always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
                add_header Access-Control-Allow-Credentials "true" always;
                add_header Content-Length 0;
                return 204;
            }
            
            # Spring Boot 애플리케이션으로 프록시
            proxy_pass http://fintech_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 타임아웃 및 버퍼 설정
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # 에러 페이지 설정
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}