name: Build and Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Spring Boot Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: dennyahn/fintech-server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Nginx Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./nginx
        push: true
        tags: dennyahn/finsight-nginx:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}
        
    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          # 프로젝트 디렉토리로 이동
          cd Finsight_main_server
          
          # 로컬 변경사항 무시하고 강제 업데이트
          echo "🔄 최신 코드로 강제 업데이트 중..."
          git fetch origin
          git reset --hard origin/main
          git clean -fd
          
          # Docker Compose 파일 자동 수정 (version 속성 제거)
          echo "🔧 Docker Compose 파일 수정 중..."
          sed -i '/^version:/d' docker-compose.prod.yml
          
          # 완전 재배포
          echo "🐳 기존 컨테이너 정리 중..."
          docker-compose -f docker-compose.prod.yml down --volumes --remove-orphans
          
          echo "📥 최신 Docker 이미지 가져오기 중..."
          docker-compose -f docker-compose.prod.yml pull
          
          echo "🚀 새 컨테이너 시작 중..."
          docker-compose -f docker-compose.prod.yml up -d --force-recreate
          
          # 상태 확인
          echo "📊 컨테이너 상태 확인 중..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Nginx 컨테이너가 healthy 상태가 될 때까지 대기
          echo "⏳ Nginx 컨테이너 시작 대기 중..."
          timeout 120 bash -c 'until docker inspect fintech-nginx-prod --format="{{.State.Health.Status}}" | grep -q "healthy"; do sleep 5; done'
          
          # 애플리케이션이 완전히 준비될 때까지 헬스체크를 10초 간격으로 최대 6번 재시도
          echo "🏥 애플리케이션 헬스체크 중 (최대 1분 대기)..."
          for i in {1..6}; do
            # -L 옵션: HTTP->HTTPS 리디렉션 처리
            # -f 옵션: 서버 에러(4xx, 5xx) 발생 시 실패로 간주
            # -s 옵션: 성공 시 출력 숨김
            if curl -Lfs http://localhost/api/health; then
              echo "✅ 헬스체크 성공!"
              break
            fi
            if [ $i -eq 6 ]; then
              echo "❌ 헬스체크 실패. 애플리케이션이 정상적으로 시작되지 않았습니다."
              exit 1
            fi
            echo "($i/6) 헬스체크 재시도 대기 중..."
            sleep 10
          done
          
          echo "✅ 배포가 성공적으로 완료되었습니다!"
        EOF
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ 배포 성공: https://finsight.o-r.kr"
        else
          echo "❌ 배포 실패: 로그를 확인해주세요"
        fi
